exit
DateTime.tomorrow > date_to_compare
DateTime.tomorrow < date_to_compare
ateTime.tomorrow < date_to_compare
date_to_compare
c
exit
date_to_compare
c
to_account.deposit[:value]
to_account.deposit(value).to_s
to_account.deposit(value).to_f
to_account.deposit(value)
deposit(value).to_i
deposit(value).to_f
deposit(value.to_f)
deposit(value.to_i)
deposit(value)
to_account
c
exit
(OPEN_BUSINESS..CLOSED_BUSINESS).cover? time_now[0]
(OPEN_BUSINESS..CLOSED_BUSINESS)
business_hour.cover? time_now[0]
time_now[0]
business_hour.include? time_now[0]
time_now
business_hour.include? time_now
business_hour
business_hour.any?
DateTime.now
c
time_now
continue
c
continue
C
value
OUT_LIMIT_TRANSFER_TAX
c
date << business_hour.any? { |hour| [hour].include? DateTime.now }
date << business_hour.any? { |hour| [hour].include? today }
date << business_hour.any? { |hour| hour.include? today }
today = DateTime.now
date = []
business_hour
c
date << business_hour.any? { |hour| hour.include? today }
today = DateTime.now
date = []
business_hour
c
business_hour
date << business_hour.any? { |hour| hour.include? today }
date << business_hour.any? { |hour| puts hour }
date << business_hour.any? { |hour| hour.include?(today) }
today = DateTime.now
date = []
date << business_hour.any? { |hour| hour.include?(today) }
business_hour
c
date << business_hour.any? { |hour| hour.include?(today) }
date << business_hour.each { |hour| hour.include?(today) }
date << business_hour.each { |hour| hour.include? today }
today = DateTime.now
date << business_hour.each { |hour| hour.include? DateTime.now }
date
date = []
business_hour.each {|hours| hour.include?(date) }
business_hour.each {|hours| hour.include? date }
business_hour.include? date
date<<DateTime.now
date = []
business_hour.each {|hours| hour.include? DateTime.now }
business_hour.include? DateTime.now
business_hour
c
business_hour.include? [DateTime.now]
business_hour
business_hour.include? DateTime.now
business_hour
DateTime.now
c
bussiness_hour
bussines_hour
business_hour
c
business_hour
c
self.transactions[:kind]
self.transactions
self.user
self.kind
kind
self
account
value
c
exit
a = subject
subject
c
Transaction.create(account: account, value: value, kind: 1)
[200~Transaction.create(account: account, value: value, kind: 1)~
c
vd - vw
vw = account.send(:sum_transactions, w)
vd = account.send(:sum_transactions, d)
account.send(:sum_transactions, w)
w = account.transactions.withdraw
account.send(:sum_transactions, d)
d = account.transactions.deposit
account.transactions.deposit
account.send(:sum_transactions, d)
d = account.transactions
account.send(:sum_transactions, a)
account.send(:sum_transaction, a)
d = account.transactions.deposit
w = account.transactions.withdraw
account.transactions.withdraw
account.transactions.deposit
a - a
a = account.transactions.first.value
a = account.transactions.value
account.transactions.first.value.to_f
account.transactions.value.to_f
account.transactions
account.send(:ballance)
account.ballance
account.transactions
account.withdraw
account.withdraws
account
transaction
